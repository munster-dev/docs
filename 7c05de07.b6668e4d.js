(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{71:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return p}));var r=n(2),o=n(6),a=(n(0),n(81)),s={id:"store.md",title:"Store",sidebar_label:"Store",slug:"/store"},i={unversionedId:"store.md",id:"store.md",isDocsHomePage:!1,title:"Store",description:"Store is a service and a state management built for munster framework.",source:"@site/docs\\store.md",slug:"/store",permalink:"/docs/docs/store",editUrl:"https://github.com/munster-dev/docs/blob/master/docs/store.md",version:"current",sidebar_label:"Store",sidebar:"someSidebar",previous:{title:"Router",permalink:"/docs/docs/router"},next:{title:"Installation",permalink:"/docs/docs/cli-installation"}},c=[{value:"Installation",id:"installation",children:[]},{value:"Register the store",id:"register-the-store",children:[]},{value:"Initial state",id:"initial-state",children:[]},{value:"Setter",id:"setter",children:[]},{value:"Getter",id:"getter",children:[]},{value:"Observables",id:"observables",children:[]},{value:"Actions",id:"actions",children:[]}],l={rightToc:c};function p(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Store is a service and a state management built for munster framework.\nUsing this store will help developers to centralize and maintain the codes very easily."),Object(a.b)("h2",{id:"installation"},"Installation"),Object(a.b)("p",null,"We can install the store to our project using npm or yarn."),Object(a.b)("p",null,"Here are the examples on how we can install the package to our project."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-bash"}),"npm install @munster-dev/store\n")),Object(a.b)("p",null,"or"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-bash"}),"yarn add @munster-dev/store\n")),Object(a.b)("h2",{id:"register-the-store"},"Register the store"),Object(a.b)("p",null,"Store needs to be registered as a service before we can use it.\nWe can register a service inside ",Object(a.b)("inlineCode",{parentName:"p"},"src/index.ts")," file."),Object(a.b)("p",null,"Here's the example on how to register the store:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-javascript"}),"// src/index.ts\nimport 'reflect-metadata';\nimport './styles.scss';\nimport { Program } from '@munster-dev/core';\nimport { AppModule } form './app.module';\nimport { Store, StoreInterface } from '@munster-dev/store';\n\nconst program = new Program();\n\nprogram.bootstrapModule(AppModule);\n\nprogram.Service.addSingleton(Store);\n\nprogram.run();\n")),Object(a.b)("p",null,"An initial state of the store is required when registering the store.\nMore information for the store initial state can be found directly below this section."),Object(a.b)("h2",{id:"initial-state"},"Initial state"),Object(a.b)("p",null,"Initial state of the store is the state that is passed to the store as the initial data.\nThe initial state is required when registering the store."),Object(a.b)("p",null,"Here's an example on how to create an initial state:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-javascript"}),'// initial-state.ts\nimport { StoreInterface } from "@munster-dev/store";\n\nexport interface InitialStateInterface {\n    count: number;\n}\n\nexport const initialState: StoreInterface<InitialStateInterface> = {\n    initialState: {\n        count: 0\n    }\n}\n')),Object(a.b)("p",null,"After creating an initial state, we need to pass it as a service config for the store."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"// src/index.ts\nimport 'reflect-metadata';\nimport './styles.scss';\nimport { Program } from '@munster-dev/core';\nimport { AppModule } form './app.module';\nimport { Store, StoreInterface } from '@munster-dev/store';\nimport { initialState, InitialStateInterface } from './initial-state';\n\nconst program = new Program();\n\nprogram.bootstrapModule(AppModule);\n\nprogram.Service.addSingleton(Store)\n    .setConfig<StoreInterface<InitialStateInterface>>(initialState);\n\nprogram.run();\n")),Object(a.b)("h2",{id:"setter"},"Setter"),Object(a.b)("p",null,"Setting a state of the store is very easy."),Object(a.b)("p",null,"Here's an example on how to set a state inside a component:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-javascript"}),"import { Component } from '@munster-dev/core';\nimport { Store } from '@munster-dev/store';\nimport { InitialStateInterface } from './initial-state';\n\n@Component({\n    selector: 'app-root'\n})\nexport class RootComponent {\n\n    constructor(private store: Store<InitialStateInterface>) {}\n\n    btnClick() {\n        this.store.set('count', 100);\n    }\n}\n")),Object(a.b)("h2",{id:"getter"},"Getter"),Object(a.b)("p",null,"To get a value of a store, the developer can call the ",Object(a.b)("inlineCode",{parentName:"p"},"get")," method."),Object(a.b)("p",null,"Here's an example on how to get a value from the store:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-javascript"}),"import { Component } from '@munster-dev/core';\nimport { Store } from '@munster-dev/store';\nimport { InitialStateInterface } from './initial-state';\n\n@Component({\n    selector: 'app-root'\n})\nexport class RootComponent {\n\n    constructor(private store: Store<InitialStateInterface>) {}\n\n    btnClick() {\n        console.log(this.store.get('count'));\n    }\n}\n")),Object(a.b)("h2",{id:"observables"},"Observables"),Object(a.b)("p",null,"Store also offers a way to watch for the changes of each item of the state."),Object(a.b)("p",null,"Here's how to watch the data changes for each item in the state:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-javascript"}),"import { Component } from '@munster-dev/core';\nimport { Store } from '@munster-dev/store';\nimport { InitialStateInterface } from './initial-state';\n\n@Component({\n    selector: 'app-root'\n})\nexport class RootComponent {\n\n    constructor(private store: Store<InitialStateInterface>) {}\n\n    connectedCallback() {\n        this.store.select('count').subscribe(state => {\n            console.log(state);\n        });\n    }\n}\n")),Object(a.b)("h4",{id:"unsubscribe-to-observable"},"Unsubscribe to observable"),Object(a.b)("p",null,"All subscriptions must be unsubscribe when the component is destroyed or else it will cause a memory issue."),Object(a.b)("p",null,"Here is an example on how to unsubscribe a subscription when a component is destroyed."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-javascript"}),"import { Component } from '@munster-dev/core';\nimport { Store } from '@munster-dev/store';\nimport { InitialStateInterface } from './initial-state';\n\n@Component({\n    selector: 'app-root'\n})\nexport class RootComponent {\n\n    private subscription: Subscription;\n\n    constructor(private store: Store<InitialStateInterface>) {}\n\n    connectedCallback() {\n        this.subscription = this.store.select('count').subscribe(state => {\n            console.log(state);\n        });\n    }\n\n    disconnectedCallback() {\n        this.subscription.unsubscribe();\n    }\n}\n")),Object(a.b)("h2",{id:"actions"},"Actions"),Object(a.b)("p",null,"Actions can also be used to update the state.\nUsing this can make your codes much cleaner and easy to manage."),Object(a.b)("h4",{id:"create-actions"},"Create actions"),Object(a.b)("p",null,"Here's an example on how to create an action:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"import { createAction } from '@munster-dev/store';\n\ninterface PostInterface {\n    likesCount: number;\n    commentsCount: number;\n}\n\ninterface InitialStateInterface {\n    post: PostInterface;\n}\n\nexport const setPostLikesCount = createAction<number, PostInterface>((state: PostInterface, payload: number) => {\n    return {\n        ...state,\n        likesCount: payload\n    }\n});\n\nexport const initialState: StoreInterface<InitialStateInterface> = {\n    initialState: {\n        post: {\n            likesCount: 0,\n            commentsCount: 0\n        }\n    },\n    actions: {\n        post: [\n            setPostLikesCount // <--- action needs to be registed here\n        ]\n    }\n}\n")),Object(a.b)("p",null,"In the ",Object(a.b)("inlineCode",{parentName:"p"},"createAction"),", there are two generic types.\nFirst is the type of data that ",Object(a.b)("inlineCode",{parentName:"p"},"setPostLikesCount")," action will accept.\nThe second type is the type of the post state inside the store."),Object(a.b)("p",null,"There are two parameters for the ",Object(a.b)("inlineCode",{parentName:"p"},"createAction")," function.\nFirst is the state which holds the current state of the post.\nSecond is the payload which holds the value that is passed to the ",Object(a.b)("inlineCode",{parentName:"p"},"setPostLikesCount")," action when the action is called."),Object(a.b)("h4",{id:"dispatch-an-action"},"Dispatch an action"),Object(a.b)("p",null,"Here's an example on how to dispatch the created action above:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"import { Component } from '@munster-dev/core';\nimport { Store } from '@munster-dev/store';\nimport { InitialStateInterface, setPostLikesCount } from './initial-state';\n\n@Component({\n    selector: 'app-root'\n})\nexport class RootComponent {\n\n    constructor(private store: Store<InitialStateInterface>) {}\n\n    btnClick() {\n        this.store.action(setPostLikesCount(100));\n    }\n}\n")))}p.isMDXComponent=!0},81:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return d}));var r=n(0),o=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=o.a.createContext({}),p=function(e){var t=o.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},b=function(e){var t=p(e.components);return o.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},m=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),b=p(n),m=r,d=b["".concat(s,".").concat(m)]||b[m]||u[m]||a;return n?o.a.createElement(d,i(i({ref:t},l),{},{components:n})):o.a.createElement(d,i({ref:t},l))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,s=new Array(a);s[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var l=2;l<a;l++)s[l]=n[l];return o.a.createElement.apply(null,s)}return o.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);