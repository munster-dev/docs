(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{89:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return a})),t.d(n,"metadata",(function(){return o})),t.d(n,"rightToc",(function(){return d})),t.d(n,"default",(function(){return l}));var i=t(2),r=(t(0),t(96));const a={id:"data-binding.md",title:"Data binding",sidebar_label:"Data binding",slug:"/data-binding"},o={unversionedId:"data-binding.md",id:"data-binding.md",isDocsHomePage:!1,title:"Data binding",description:"Data binding is a way to synchronize the data of logic and view.",source:"@site/docs\\data-binding.md",slug:"/data-binding",permalink:"/docs/docs/data-binding",editUrl:"https://github.com/munster-dev/docs/blob/master/docs/data-binding.md",version:"current",sidebar_label:"Data binding",sidebar:"someSidebar",previous:{title:"Event handling",permalink:"/docs/docs/event-handling"},next:{title:"Change detection",permalink:"/docs/docs/change-detection"}},d=[{value:"Attribute binding",id:"attribute-binding",children:[]},{value:"Text binding",id:"text-binding",children:[]},{value:"Model binding",id:"model-binding",children:[]}],c={rightToc:d};function l({components:e,...n}){return Object(r.b)("wrapper",Object(i.a)({},c,n,{components:e,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Data binding is a way to synchronize the data of logic and view.\nThis means that when a value is changed in logic, view gets updated, and when the user change some data in the view, variables in logic will be updated."),Object(r.b)("h2",{id:"attribute-binding"},"Attribute binding"),Object(r.b)("p",null,"Here is an example on how to bind a property from the logic into an attribute:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-typescript"}),"import { Component, Bind } from '@munster-dev/core';\n\n@Component('app-root')\nexport class App {\n\n    id: number;\n\n    constructor() {\n        setInterval(this.updateId, 1000);\n    }\n\n    @Bind\n    updateId() {\n        this.id = new Date().getTime();\n    }\n\n    render() {\n        return <h1 id={this.id}>App component.</h1>\n    }\n}\n")),Object(r.b)("p",null,"In the example above, the id of h1 element will be updated every second.\nThis is an example of one way binding."),Object(r.b)("h2",{id:"text-binding"},"Text binding"),Object(r.b)("p",null,"Here is an example on how to bind a component property to view:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-typescript"}),"import { Component, Bind } from '@munster-dev/core';\n\n@Component('app-greeting')\nexport class Greeting {\n    number = 'Hello World!';\n\n    constructor() {\n        setInterval(this.updateNumber, 1000);\n    }\n\n    @Bind\n    updateNumber() {\n        this.number = new Date().getTime();\n    }\n\n    render() {\n        return <h1>{this.number}</h1>\n    }\n}\n")),Object(r.b)("p",null,"In the example above, the number will be updated every second and display the changes as a text in view.\nThis is an example of one way binding."),Object(r.b)("h2",{id:"model-binding"},"Model binding"),Object(r.b)("p",null,"Model binding is a two way binding of data.\nIt uses the ",Object(r.b)("inlineCode",{parentName:"p"},"v:model")," directive.\nEvery time the model is changed from the view, the value in logic will be updated and the same thing will happen in the view when the model is updated from the logic."),Object(r.b)("p",null,"Ex."),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-typescript"}),"import { Component } from '@munster-dev/core';\n\n@Component('app-root')\nexport class App {\n\n    public sampleModel: string = 'Some text';\n\n    render() {\n        return <input view:model={this.sampleModel} type=\"text\" />\n    }\n}\n")),Object(r.b)("p",null,"This is an example of two way binding."))}l.isMDXComponent=!0},96:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return m}));var i=t(0),r=t.n(i);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function d(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=r.a.createContext({}),p=function(e){var n=r.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):d(d({},n),e)),t},b=function(e){var n=p(e.components);return r.a.createElement(l.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},u=r.a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),b=p(t),u=i,m=b["".concat(o,".").concat(u)]||b[u]||s[u]||a;return t?r.a.createElement(m,d(d({ref:n},l),{},{components:t})):r.a.createElement(m,d({ref:n},l))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=u;var d={};for(var c in n)hasOwnProperty.call(n,c)&&(d[c]=n[c]);d.originalType=e,d.mdxType="string"==typeof e?e:i,o[1]=d;for(var l=2;l<a;l++)o[l]=t[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);